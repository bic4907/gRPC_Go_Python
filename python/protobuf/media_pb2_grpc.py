# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc


from . import media_pb2 as media__pb2


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/protobuf.Service/SendMessage',
                request_serializer=media__pb2.ReqMessage.SerializeToString,
                response_deserializer=media__pb2.RplMessage.FromString,
                )
        self.StreamVideo = channel.stream_unary(
                '/protobuf.Service/StreamVideo',
                request_serializer=media__pb2.VideoChunk.SerializeToString,
                response_deserializer=media__pb2.ReceiveReply.FromString,
                )
        self.StreamAudio = channel.stream_unary(
                '/protobuf.Service/StreamAudio',
                request_serializer=media__pb2.AudioChunk.SerializeToString,
                response_deserializer=media__pb2.ReceiveReply.FromString,
                )


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamVideo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAudio(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=media__pb2.ReqMessage.FromString,
                    response_serializer=media__pb2.RplMessage.SerializeToString,
            ),
            'StreamVideo': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamVideo,
                    request_deserializer=media__pb2.VideoChunk.FromString,
                    response_serializer=media__pb2.ReceiveReply.SerializeToString,
            ),
            'StreamAudio': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamAudio,
                    request_deserializer=media__pb2.AudioChunk.FromString,
                    response_serializer=media__pb2.ReceiveReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protobuf.Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protobuf.Service/SendMessage',
            media__pb2.ReqMessage.SerializeToString,
            media__pb2.RplMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamVideo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/protobuf.Service/StreamVideo',
            media__pb2.VideoChunk.SerializeToString,
            media__pb2.ReceiveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/protobuf.Service/StreamAudio',
            media__pb2.AudioChunk.SerializeToString,
            media__pb2.ReceiveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
